╭──────────────────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────────────────╮
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpx/_transpor │
│ ts/default.py:101 in map_httpcore_exceptions                                                                                                       │
│                                                                                                                                                    │
│    98 │   if len(HTTPCORE_EXC_MAP) == 0:                                                       ╭─── locals ───╮                                    │
│    99 │   │   HTTPCORE_EXC_MAP = _load_httpcore_exceptions()                                   │ message = '' │                                    │
│   100 │   try:                                                                                 ╰──────────────╯                                    │
│ ❱ 101 │   │   yield                                                                                                                                │
│   102 │   except Exception as exc:                                                                                                                 │
│   103 │   │   mapped_exc = None                                                                                                                    │
│   104                                                                                                                                              │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpx/_transpor │
│ ts/default.py:271 in __aiter__                                                                                                                     │
│                                                                                                                                                    │
│   268 │                                                                                                                                            │
│   269 │   async def __aiter__(self) -> typing.AsyncIterator[bytes]:                                                                                │
│   270 │   │   with map_httpcore_exceptions():                                                                                                      │
│ ❱ 271 │   │   │   async for part in self._httpcore_stream:                                                                                         │
│   272 │   │   │   │   yield part                                                                                                                   │
│   273 │                                                                                                                                            │
│   274 │   async def aclose(self) -> None:                                                                                                          │
│                                                                                                                                                    │
│ ╭──────────────────────────────────────────── locals ────────────────────────────────────────────╮                                                 │
│ │ part = b'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45 │                                                 │
│ │ self = <httpx._transports.default.AsyncResponseStream object at 0x7f28c4577950>                │                                                 │
│ ╰────────────────────────────────────────────────────────────────────────────────────────────────╯                                                 │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpcore/_async │
│ /connection_pool.py:407 in __aiter__                                                                                                               │
│                                                                                                                                                    │
│   404 │   │   │   │   yield part                                                                                                                   │
│   405 │   │   except BaseException as exc:                                                                                                         │
│   406 │   │   │   await self.aclose()                                                                                                              │
│ ❱ 407 │   │   │   raise exc from None                                                                                                              │
│   408 │                                                                                                                                            │
│   409 │   async def aclose(self) -> None:                                                                                                          │
│   410 │   │   if not self._closed:                                                                                                                 │
│                                                                                                                                                    │
│ ╭──────────────────────────────────────────── locals ────────────────────────────────────────────╮                                                 │
│ │ part = b'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45 │                                                 │
│ │ self = <httpcore._async.connection_pool.PoolByteStream object at 0x7f28c4540fd0>               │                                                 │
│ ╰────────────────────────────────────────────────────────────────────────────────────────────────╯                                                 │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpcore/_async │
│ /connection_pool.py:403 in __aiter__                                                                                                               │
│                                                                                                                                                    │
│   400 │                                                                                                                                            │
│   401 │   async def __aiter__(self) -> typing.AsyncIterator[bytes]:                                                                                │
│   402 │   │   try:                                                                                                                                 │
│ ❱ 403 │   │   │   async for part in self._stream:                                                                                                  │
│   404 │   │   │   │   yield part                                                                                                                   │
│   405 │   │   except BaseException as exc:                                                                                                         │
│   406 │   │   │   await self.aclose()                                                                                                              │
│                                                                                                                                                    │
│ ╭──────────────────────────────────────────── locals ────────────────────────────────────────────╮                                                 │
│ │ part = b'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45 │                                                 │
│ │ self = <httpcore._async.connection_pool.PoolByteStream object at 0x7f28c4540fd0>               │                                                 │
│ ╰────────────────────────────────────────────────────────────────────────────────────────────────╯                                                 │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpcore/_async │
│ /http11.py:342 in __aiter__                                                                                                                        │
│                                                                                                                                                    │
│   339 │   │   │   # before raising that exception.                                                                                                 │
│   340 │   │   │   with AsyncShieldCancellation():                                                                                                  │
│   341 │   │   │   │   await self.aclose()                                                                                                          │
│ ❱ 342 │   │   │   raise exc                                                                                                                        │
│   343 │                                                                                                                                            │
│   344 │   async def aclose(self) -> None:                                                                                                          │
│   345 │   │   if not self._closed:                                                                                                                 │
│                                                                                                                                                    │
│ ╭───────────────────────────────────────────── locals ─────────────────────────────────────────────╮                                               │
│ │  chunk = b'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45 │                                               │
│ │ kwargs = {'request': <Request [b'GET']>}                                                         │                                               │
│ │   self = <httpcore._async.http11.HTTP11ConnectionByteStream object at 0x7f28c47ccb90>            │                                               │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────────╯                                               │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpcore/_async │
│ /http11.py:334 in __aiter__                                                                                                                        │
│                                                                                                                                                    │
│   331 │   │   kwargs = {"request": self._request}                                                                                                  │
│   332 │   │   try:                                                                                                                                 │
│   333 │   │   │   async with Trace("receive_response_body", logger, self._request, kwargs):                                                        │
│ ❱ 334 │   │   │   │   async for chunk in self._connection._receive_response_body(**kwargs):                                                        │
│   335 │   │   │   │   │   yield chunk                                                                                                              │
│   336 │   │   except BaseException as exc:                                                                                                         │
│   337 │   │   │   # If we get an exception while streaming the response,                                                                           │
│                                                                                                                                                    │
│ ╭───────────────────────────────────────────── locals ─────────────────────────────────────────────╮                                               │
│ │  chunk = b'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45 │                                               │
│ │ kwargs = {'request': <Request [b'GET']>}                                                         │                                               │
│ │   self = <httpcore._async.http11.HTTP11ConnectionByteStream object at 0x7f28c47ccb90>            │                                               │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────────╯                                               │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpcore/_async │
│ /http11.py:203 in _receive_response_body                                                                                                           │
│                                                                                                                                                    │
│   200 │   │   timeout = timeouts.get("read", None)                                                                                                 │
│   201 │   │                                                                                                                                        │
│   202 │   │   while True:                                                                                                                          │
│ ❱ 203 │   │   │   event = await self._receive_event(timeout=timeout)                                                                               │
│   204 │   │   │   if isinstance(event, h11.Data):                                                                                                  │
│   205 │   │   │   │   yield bytes(event.data)                                                                                                      │
│   206 │   │   │   elif isinstance(event, (h11.EndOfMessage, h11.PAUSED)):                                                                          │
│                                                                                                                                                    │
│ ╭──────────────────────────────────────────────────────────────────── locals ────────────────────────────────────────────────────────────────────╮ │
│ │    event = Data(                                                                                                                               │ │
│ │            │   data=bytearray(b'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "message": "", "target": null,   │ │
│ │            "data": "PING"}\n\n'),                                                                                                              │ │
│ │            │   chunk_start=True,                                                                                                               │ │
│ │            │   chunk_end=True                                                                                                                  │ │
│ │            )                                                                                                                                   │ │
│ │  request = <Request [b'GET']>                                                                                                                  │ │
│ │     self = <AsyncHTTP11Connection ['https://localhost:4443', CLOSED, Request Count: 1]>                                                        │ │
│ │  timeout = 5.0                                                                                                                                 │ │
│ │ timeouts = {'connect': 5.0, 'read': 5.0, 'write': 5.0, 'pool': 5.0}                                                                            │ │
│ ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpcore/_async │
│ /http11.py:217 in _receive_event                                                                                                                   │
│                                                                                                                                                    │
│   214 │   │   │   │   event = self._h11_state.next_event()                                                                                         │
│   215 │   │   │                                                                                                                                    │
│   216 │   │   │   if event is h11.NEED_DATA:                                                                                                       │
│ ❱ 217 │   │   │   │   data = await self._network_stream.read(                                                                                      │
│   218 │   │   │   │   │   self.READ_NUM_BYTES, timeout=timeout                                                                                     │
│   219 │   │   │   │   )                                                                                                                            │
│   220                                                                                                                                              │
│                                                                                                                                                    │
│ ╭──────────────────────────────────────── locals ────────────────────────────────────────╮                                                         │
│ │    self = <AsyncHTTP11Connection ['https://localhost:4443', CLOSED, Request Count: 1]> │                                                         │
│ │ timeout = 5.0                                                                          │                                                         │
│ ╰────────────────────────────────────────────────────────────────────────────────────────╯                                                         │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpcore/_backe │
│ nds/anyio.py:32 in read                                                                                                                            │
│                                                                                                                                                    │
│    29 │   │   │   anyio.ClosedResourceError: ReadError,                                                                                            │
│    30 │   │   │   anyio.EndOfStream: ReadError,                                                                                                    │
│    31 │   │   }                                                                                                                                    │
│ ❱  32 │   │   with map_exceptions(exc_map):                                                                                                        │
│    33 │   │   │   with anyio.fail_after(timeout):                                                                                                  │
│    34 │   │   │   │   try:                                                                                                                         │
│    35 │   │   │   │   │   return await self._stream.receive(max_bytes=max_bytes)                                                                   │
│                                                                                                                                                    │
│ ╭────────────────────────────────────── locals ──────────────────────────────────────╮                                                             │
│ │   exc_map = {                                                                      │                                                             │
│ │             │   <class 'TimeoutError'>: <class 'httpcore.ReadTimeout'>,            │                                                             │
│ │             │   <class 'anyio.BrokenResourceError'>: <class 'httpcore.ReadError'>, │                                                             │
│ │             │   <class 'anyio.ClosedResourceError'>: <class 'httpcore.ReadError'>, │                                                             │
│ │             │   <class 'anyio.EndOfStream'>: <class 'httpcore.ReadError'>          │                                                             │
│ │             }                                                                      │                                                             │
│ │ max_bytes = 65536                                                                  │                                                             │
│ │      self = <httpcore._backends.anyio.AnyIOStream object at 0x7f28c457bdd0>        │                                                             │
│ │   timeout = 5.0                                                                    │                                                             │
│ ╰────────────────────────────────────────────────────────────────────────────────────╯                                                             │
│                                                                                                                                                    │
│ /usr/lib/python3.11/contextlib.py:155 in __exit__                                                                                                  │
│                                                                                                                                                    │
│   152 │   │   │   │   # tell if we get the same exception back                                                                                     │
│   153 │   │   │   │   value = typ()                                                                                                                │
│   154 │   │   │   try:                                                                                                                             │
│ ❱ 155 │   │   │   │   self.gen.throw(typ, value, traceback)                                                                                        │
│   156 │   │   │   except StopIteration as exc:                                                                                                     │
│   157 │   │   │   │   # Suppress StopIteration *unless* it's the same exception that                                                               │
│   158 │   │   │   │   # was passed to throw().  This prevents a StopIteration                                                                      │
│                                                                                                                                                    │
│ ╭────────────────────────────────── locals ──────────────────────────────────╮                                                                     │
│ │      self = <contextlib._GeneratorContextManager object at 0x7f28c42bdc90> │                                                                     │
│ │ traceback = <traceback object at 0x7f28c47b1580>                           │                                                                     │
│ │     value = TimeoutError()                                                 │                                                                     │
│ ╰────────────────────────────────────────────────────────────────────────────╯                                                                     │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpcore/_excep │
│ tions.py:14 in map_exceptions                                                                                                                      │
│                                                                                                                                                    │
│   11 │   except Exception as exc:  # noqa: PIE786                                                                                                  │
│   12 │   │   for from_exc, to_exc in map.items():                                                                                                  │
│   13 │   │   │   if isinstance(exc, from_exc):                                                                                                     │
│ ❱ 14 │   │   │   │   raise to_exc(exc) from exc                                                                                                    │
│   15 │   │   raise  # pragma: nocover                                                                                                              │
│   16                                                                                                                                               │
│   17                                                                                                                                               │
│                                                                                                                                                    │
│ ╭─────────────────────────────────── locals ───────────────────────────────────╮                                                                   │
│ │ map = {                                                                      │                                                                   │
│ │       │   <class 'TimeoutError'>: <class 'httpcore.ReadTimeout'>,            │                                                                   │
│ │       │   <class 'anyio.BrokenResourceError'>: <class 'httpcore.ReadError'>, │                                                                   │
│ │       │   <class 'anyio.ClosedResourceError'>: <class 'httpcore.ReadError'>, │                                                                   │
│ │       │   <class 'anyio.EndOfStream'>: <class 'httpcore.ReadError'>          │                                                                   │
│ │       }                                                                      │                                                                   │
│ ╰──────────────────────────────────────────────────────────────────────────────╯                                                                   │
╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
ReadTimeout

The above exception was the direct cause of the following exception:

╭──────────────────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────────────────╮
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/textual/worker. │
│ py:368 in _run                                                                                                                                     │
│                                                                                                                                                    │
│   365 │   │   │   self.state = WorkerState.RUNNING                                                                                                 │
│   366 │   │   │   app.log.worker(self)                                                                                                             │
│   367 │   │   │   try:                                                                                                                             │
│ ❱ 368 │   │   │   │   self._result = await self.run()                                                                                              │
│   369 │   │   │   except asyncio.CancelledError as error:                                                                                          │
│   370 │   │   │   │   self.state = WorkerState.CANCELLED                                                                                           │
│   371 │   │   │   │   self._error = error                                                                                                          │
│                                                                                                                                                    │
│ ╭───────────────────────────────────────────── locals ──────────────────────────────────────────────╮                                              │
│ │           app = PongCLI(title='PongCLI', classes={'-dark-mode'}, pseudo_classes={'blur', 'dark'}) │                                              │
│ │         error = ReadTimeout('')                                                                   │                                              │
│ │          self = <Worker ERROR name='startSSE' description='startSSE()'>                           │                                              │
│ │ worker_failed = WorkerFailed("Worker raised exception: ReadTimeout('')")                          │                                              │
│ ╰───────────────────────────────────────────────────────────────────────────────────────────────────╯                                              │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/textual/worker. │
│ py:352 in run                                                                                                                                      │
│                                                                                                                                                    │
│   349 │   │   Returns:                                                                                                                             │
│   350 │   │   │   Return value of the work.                                                                                                        │
│   351 │   │   """                                                                                                                                  │
│ ❱ 352 │   │   return await (                                                                                                                       │
│   353 │   │   │   self._run_threaded() if self._thread_worker else self._run_async()                                                               │
│   354 │   │   )                                                                                                                                    │
│   355                                                                                                                                              │
│                                                                                                                                                    │
│ ╭──────────────────────────── locals ────────────────────────────╮                                                                                 │
│ │ self = <Worker ERROR name='startSSE' description='startSSE()'> │                                                                                 │
│ ╰────────────────────────────────────────────────────────────────╯                                                                                 │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/textual/worker. │
│ py:337 in _run_async                                                                                                                               │
│                                                                                                                                                    │
│   334 │   │   │   or hasattr(self._work, "func")                                                                                                   │
│   335 │   │   │   and inspect.iscoroutinefunction(self._work.func)                                                                                 │
│   336 │   │   ):                                                                                                                                   │
│ ❱ 337 │   │   │   return await self._work()                                                                                                        │
│   338 │   │   elif inspect.isawaitable(self._work):                                                                                                │
│   339 │   │   │   return await self._work                                                                                                          │
│   340 │   │   elif callable(self._work):                                                                                                           │
│                                                                                                                                                    │
│ ╭──────────────────────────── locals ────────────────────────────╮                                                                                 │
│ │ self = <Worker ERROR name='startSSE' description='startSSE()'> │                                                                                 │
│ ╰────────────────────────────────────────────────────────────────╯                                                                                 │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/srcs/classes/PongCLIApp.py:54 in startSSE          │
│                                                                                                                                                    │
│   51 │   │   │   │   │   │   if (response.status_code >= 400):                                                                                     │
│   52 │   │   │   │   │   │   │   raise (Exception(f"({response.status_code}) SSE connection p                                                      │
│   53 │   │   │   │   │   │                                                                                                                         │
│ ❱ 54 │   │   │   │   │   │   async for line in response.aiter_text():                                                                              │
│   55 │   │   │   │   │   │   │   try:                                                                                                              │
│   56 │   │   │   │   │   │   │   │   events = self.regex.findall(line)                                                                             │
│   57 │   │   │   │   │   │   │   │   for event, data in events:                                                                                    │
│                                                                                                                                                    │
│ ╭──────────────────────────────────────────────────────── locals ────────────────────────────────────────────────────────╮                         │
│ │   client = <httpx.AsyncClient object at 0x7f28c45d0b50>                                                                │                         │
│ │     data = '{"service": "auth", "event_code": "ping", "type": "event", "message": "", "targe'+25                       │                         │
│ │ dataJson = None                                                                                                        │                         │
│ │    event = 'ping'                                                                                                      │                         │
│ │   events = [('ping', '{"service": "auth", "event_code": "ping", "type": "event", "message": "", "targe'+25)]           │                         │
│ │  headers = {                                                                                                           │                         │
│ │            │   'Content-Type': 'text/event-stream',                                                                    │                         │
│ │            │   'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhw'+155 │                         │
│ │            }                                                                                                           │                         │
│ │     line = 'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45                      │                         │
│ │ response = <Response [200 OK]>                                                                                         │                         │
│ │     self = PongCLI(title='PongCLI', classes={'-dark-mode'}, pseudo_classes={'blur', 'dark'})                           │                         │
│ ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯                         │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpx/_models.p │
│ y:1018 in aiter_text                                                                                                                               │
│                                                                                                                                                    │
│   1015 │   │   decoder = TextDecoder(encoding=self.encoding or "utf-8")                                                                            │
│   1016 │   │   chunker = TextChunker(chunk_size=chunk_size)                                                                                        │
│   1017 │   │   with request_context(request=self._request):                                                                                        │
│ ❱ 1018 │   │   │   async for byte_content in self.aiter_bytes():                                                                                   │
│   1019 │   │   │   │   text_content = decoder.decode(byte_content)                                                                                 │
│   1020 │   │   │   │   for chunk in chunker.decode(text_content):                                                                                  │
│   1021 │   │   │   │   │   yield chunk                                                                                                             │
│                                                                                                                                                    │
│ ╭──────────────────────────────────────────────── locals ────────────────────────────────────────────────╮                                         │
│ │ byte_content = b'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45 │                                         │
│ │        chunk = 'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45  │                                         │
│ │   chunk_size = None                                                                                    │                                         │
│ │      chunker = <httpx._decoders.TextChunker object at 0x7f28c4577150>                                  │                                         │
│ │      decoder = <httpx._decoders.TextDecoder object at 0x7f28c457f7d0>                                  │                                         │
│ │         self = <Response [200 OK]>                                                                     │                                         │
│ │ text_content = 'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45  │                                         │
│ ╰────────────────────────────────────────────────────────────────────────────────────────────────────────╯                                         │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpx/_models.p │
│ y:997 in aiter_bytes                                                                                                                               │
│                                                                                                                                                    │
│    994 │   │   │   decoder = self._get_content_decoder()                                                                                           │
│    995 │   │   │   chunker = ByteChunker(chunk_size=chunk_size)                                                                                    │
│    996 │   │   │   with request_context(request=self._request):                                                                                    │
│ ❱  997 │   │   │   │   async for raw_bytes in self.aiter_raw():                                                                                    │
│    998 │   │   │   │   │   decoded = decoder.decode(raw_bytes)                                                                                     │
│    999 │   │   │   │   │   for chunk in chunker.decode(decoded):                                                                                   │
│   1000 │   │   │   │   │   │   yield chunk                                                                                                         │
│                                                                                                                                                    │
│ ╭─────────────────────────────────────────────── locals ───────────────────────────────────────────────╮                                           │
│ │      chunk = b'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45 │                                           │
│ │ chunk_size = None                                                                                    │                                           │
│ │    chunker = <httpx._decoders.ByteChunker object at 0x7f28c45f7290>                                  │                                           │
│ │    decoded = b'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45 │                                           │
│ │    decoder = <httpx._decoders.IdentityDecoder object at 0x7f28c45f6590>                              │                                           │
│ │  raw_bytes = b'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45 │                                           │
│ │       self = <Response [200 OK]>                                                                     │                                           │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────╯                                           │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpx/_models.p │
│ y:1055 in aiter_raw                                                                                                                                │
│                                                                                                                                                    │
│   1052 │   │   chunker = ByteChunker(chunk_size=chunk_size)                                                                                        │
│   1053 │   │                                                                                                                                       │
│   1054 │   │   with request_context(request=self._request):                                                                                        │
│ ❱ 1055 │   │   │   async for raw_stream_bytes in self.stream:                                                                                      │
│   1056 │   │   │   │   self._num_bytes_downloaded += len(raw_stream_bytes)                                                                         │
│   1057 │   │   │   │   for chunk in chunker.decode(raw_stream_bytes):                                                                              │
│   1058 │   │   │   │   │   yield chunk                                                                                                             │
│                                                                                                                                                    │
│ ╭────────────────────────────────────────────────── locals ──────────────────────────────────────────────────╮                                     │
│ │            chunk = b'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45 │                                     │
│ │       chunk_size = None                                                                                    │                                     │
│ │          chunker = <httpx._decoders.ByteChunker object at 0x7f28c45f7490>                                  │                                     │
│ │ raw_stream_bytes = b'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45 │                                     │
│ │             self = <Response [200 OK]>                                                                     │                                     │
│ ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────╯                                     │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpx/_client.p │
│ y:176 in __aiter__                                                                                                                                 │
│                                                                                                                                                    │
│    173 │   │   self._start = start                                                                                                                 │
│    174 │                                                                                                                                           │
│    175 │   async def __aiter__(self) -> typing.AsyncIterator[bytes]:                                                                               │
│ ❱  176 │   │   async for chunk in self._stream:                                                                                                    │
│    177 │   │   │   yield chunk                                                                                                                     │
│    178 │                                                                                                                                           │
│    179 │   async def aclose(self) -> None:                                                                                                         │
│                                                                                                                                                    │
│ ╭──────────────────────────────────────────── locals ─────────────────────────────────────────────╮                                                │
│ │ chunk = b'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45 │                                                │
│ │  self = <httpx._client.BoundAsyncStream object at 0x7f28c457f4d0>                               │                                                │
│ ╰─────────────────────────────────────────────────────────────────────────────────────────────────╯                                                │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpx/_transpor │
│ ts/default.py:270 in __aiter__                                                                                                                     │
│                                                                                                                                                    │
│   267 │   │   self._httpcore_stream = httpcore_stream                                                                                              │
│   268 │                                                                                                                                            │
│   269 │   async def __aiter__(self) -> typing.AsyncIterator[bytes]:                                                                                │
│ ❱ 270 │   │   with map_httpcore_exceptions():                                                                                                      │
│   271 │   │   │   async for part in self._httpcore_stream:                                                                                         │
│   272 │   │   │   │   yield part                                                                                                                   │
│   273                                                                                                                                              │
│                                                                                                                                                    │
│ ╭──────────────────────────────────────────── locals ────────────────────────────────────────────╮                                                 │
│ │ part = b'event: ping\ndata: {"service": "auth", "event_code": "ping", "type": "event", "me'+45 │                                                 │
│ │ self = <httpx._transports.default.AsyncResponseStream object at 0x7f28c4577950>                │                                                 │
│ ╰────────────────────────────────────────────────────────────────────────────────────────────────╯                                                 │
│                                                                                                                                                    │
│ /usr/lib/python3.11/contextlib.py:155 in __exit__                                                                                                  │
│                                                                                                                                                    │
│   152 │   │   │   │   # tell if we get the same exception back                                                                                     │
│   153 │   │   │   │   value = typ()                                                                                                                │
│   154 │   │   │   try:                                                                                                                             │
│ ❱ 155 │   │   │   │   self.gen.throw(typ, value, traceback)                                                                                        │
│   156 │   │   │   except StopIteration as exc:                                                                                                     │
│   157 │   │   │   │   # Suppress StopIteration *unless* it's the same exception that                                                               │
│   158 │   │   │   │   # was passed to throw().  This prevents a StopIteration                                                                      │
│                                                                                                                                                    │
│ ╭────────────────────────────────── locals ──────────────────────────────────╮                                                                     │
│ │      self = <contextlib._GeneratorContextManager object at 0x7f28c5872710> │                                                                     │
│ │ traceback = <traceback object at 0x7f28c42972c0>                           │                                                                     │
│ │     value = ReadTimeout(TimeoutError())                                    │                                                                     │
│ ╰────────────────────────────────────────────────────────────────────────────╯                                                                     │
│                                                                                                                                                    │
│ /home/xcharra/Documents/42Projects/CommonCore/Rank6/ft_transcendence/srcs/requirements/pong-cli/.venv/lib/python3.11/site-packages/httpx/_transpor │
│ ts/default.py:118 in map_httpcore_exceptions                                                                                                       │
│                                                                                                                                                    │
│   115 │   │   │   raise                                                                        ╭─── locals ───╮                                    │
│   116 │   │                                                                                    │ message = '' │                                    │
│   117 │   │   message = str(exc)                                                               ╰──────────────╯                                    │
│ ❱ 118 │   │   raise mapped_exc(message) from exc                                                                                                   │
│   119                                                                                                                                              │
│   120                                                                                                                                              │
│   121 class ResponseStream(SyncByteStream):                                                                                                        │
╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
ReadTimeout
